//Si Pham (tonka7su)
//October 23, 2021
//Steve

#include <Arduboy2.h>

#define GROUND_LEVEL  21
#define SPEED         2

const uint8_t PROGMEM dinosaur_still[] = {
  18, 21,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFB, 0xFF, 0xFF, 0xBF, 0xBF, 0x3F, 0x3E,
  0x3F, 0x7C, 0xF8, 0xF0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x04, 0x0C, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x1F, 0x17, 0x03, 0x01, 0x03, 0x1F, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const uint8_t PROGMEM dinosaur_mask[] = {
  0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0xFE,	0xFF,	0xFF,	0xFF,	0xFF,	0xBF,	0xBF,	0x3F,	0x3E,
  0x3F,	0x7C,	0xF8,	0xF0,	0xF0,	0xF8,	0xFC,	0xFE,	0xFF,	0xFF,	0xFF,	0x7F,	0x3F,	0x04,	0x0C,	0x00,	0x00,	0x00,
  0x00,	0x00,	0x01,	0x3F,	0x3F,	0x3F,	0x3F,	0x03,	0x3F,	0x3F,	0x3F,	0x38,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,
};

const byte PROGMEM ground_flat[] = {
  32, 8,
  0x14,	0x04,	0x04,	0x24,	0x04,	0x44,	0x44,	0x04,	0x04,	0x04,	0x04,	0x04,	0x24,	0x04,	0x04,	0x04,	0x04,	0x14,	0x14,	0x04,	0x04,	0x04,	0x44,	0x44,	0x04,	0x04,	0x04,	0x04,	0x24,	0x04,	0x04,	0x04,
};

const byte PROGMEM ground_bump[] = {
  32, 8,
  0x04, 0x24, 0x24, 0x04, 0x04, 0x04, 0x44, 0x04, 0x04, 0x04, 0x14, 0x04, 0x22, 0x02, 0x01, 0x01, 0x09, 0x81, 0x82, 0x02, 0x04, 0x04, 0x04, 0x14, 0x04, 0x04, 0x04, 0x44, 0x44, 0x04, 0x04, 0x04,
};

const byte PROGMEM ground_hole[] = {
  32, 8,
  0x84, 0x84, 0x04, 0x04, 0x04, 0x14, 0x04, 0x14, 0x04, 0x44, 0x04, 0x04, 0x08, 0x08, 0x90, 0x90, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x44, 0x44, 0x04, 0x04, 0x04, 0x14, 0x04, 0x24, 0x04, 0x04,
};



enum class GroundType : uint8_t {
  Flat,
  Bump,
  Hole,
};

const byte *ground_images[] = { ground_flat, ground_bump, ground_hole };

Arduboy2 arduboy;
int groundX = 0;

GroundType ground[5] = {
  GroundType::Flat,
  GroundType::Flat,
  GroundType::Hole,
  GroundType::Flat,
  GroundType::Flat,
};

void setup() {
  arduboy.begin();
  arduboy.setFrameRate(75);
  arduboy.display();
  // arduboy.initRandomSeed();
  arduboy.clear();
}

void moveLeft() {
  groundX -= SPEED;
}

void moveRight() {
  groundX += SPEED;
}

void playerInput() {
  if (arduboy.pressed(LEFT_BUTTON)) {
    moveLeft();
  }
  if (arduboy.pressed(RIGHT_BUTTON)) {
    moveRight();
  }
}

void drawGround() {
  // calculate the next ground tile
  if (groundX % 32 == 0)
  {
    groundX = 0;

    uint8_t type = random(0, 6);
    GroundType groundType;

    switch (type)
    {
    case 0 ... 3:
      groundType = GroundType::Flat;
      break;

    case 4:
      groundType = GroundType::Bump;
      break;

    case 5:
      groundType = GroundType::Hole;
      break;
    
    default:
      break;
    }

    ground[0] = ground[1];
    ground[1] = ground[2];
    ground[2] = ground[3];
    ground[3] = ground[4];
    ground[5] = groundType;
  }

  groundX++;
  
  // draw scrolling ground
  for (uint8_t i = 0; i < 5; i++) {
    uint8_t imageIndex = static_cast<uint8_t>(ground[i]);
    Sprites::drawSelfMasked((i * 32) - groundX, GROUND_LEVEL, ground_images[imageIndex], 0);
  }
}

void drawSteve() {
  // draw steve
  Sprites::drawOverwrite(3, 4, dinosaur_still, 0);
  Sprites::drawExternalMask(3, 4, dinosaur_still, dinosaur_mask, 0, 0);
}

void loop() {
  if (!arduboy.nextFrame()) {
    return;
  }
  arduboy.pollButtons();
  arduboy.clear();
  // arduboy.setCursor(0, 0);
  playerInput();
  drawGround();
  drawSteve();
  arduboy.display();
}
